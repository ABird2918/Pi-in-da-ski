#type: ignore
import time
import digitalio
import board
from adafruit_lsm6ds.lsm6dso32 import LSM6DSO32
import busio
#from ulab import numpy as np
import ulab
#from scipy import integrate

sda = board.GP4 #SDA pin
scl = board.GP5 #SCL pin
i2c = busio.I2C(scl,sda) #I2C device declaration
sensor = LSM6DSO32(i2c)
timer = 0
max  = 0
min = 0
x = []
t = []

def dblquad(func, a, b, gfun, hfun, args=(), epsabs=1.49e-8, epsrel=1.49e-8):
    """
    

    """

    def temp_ranges(*args):
        return [gfun(args[0]) if callable(gfun) else gfun,
                hfun(args[0]) if callable(hfun) else hfun]

    return nquad(func, [temp_ranges, [a, b]], args=args,
            opts={"epsabs": epsabs, "epsrel": epsrel})


def math():
    #xfirst = np.trapz(x, t)
    #print(xfirst)
    calcelus = ulab.scipy.integrate.dblquad(x, 0, t, min, max)
    print(calcelus)


#altitude = sensor.altitude
while True: 
# create the display group
    
    #print(f"{sensor.altitude}")  
    #data = f"\n{round(sensor.acceleration[0],3)}, {round(sensor.acceleration[1],3)}, {round(sensor.acceleration[2],3)}"
    #print(data)
    #time.sleep(2)
    xdata = sensor.acceleration[0]
    print(xdata)
    x.append(xdata)
    if xdata > max:
        max = xdata
    if xdata < min:
        min = xdata
    print(timer)
    time.sleep(1)
    timer = timer + 1
    t.append(timer)
    if (timer == 10):
        math()
        timer = 0



#x path = initial x coordinate + 2nd integral of xacceleration
#y path = initial y coordinate + integral of yacceleration with respect to time
#z path = initial z coordinate + integral of zacceleration with respect to time
